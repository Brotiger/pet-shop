/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/singl/product.js":
/*!***************************************!*\
  !*** ./resources/js/singl/product.js ***!
  \***************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n$(\"#addPhoto\").on(\"click\", function () {\n  $(\"#imgList\").prepend(\"<div class=\\\"form-group\\\" block imgBlock>\" + \"<div class=\\\"input-group\\\">\" + \"<div class=\\\"input-group-prepend\\\">\" + \"<button type=\\\"button\\\" class=\\\"btn btn-danger\\\" delete-block>\" + \"<i class=\\\"fas fa-trash\\\"></i>\" + \"</button>\" + \"</div>\" + \"<div class=\\\"custom-file\\\">\" + \"<input type=\\\"file\\\" name=\\\"img[]\\\" class=\\\"custom-file-input\\\" required>\" + \"<label class=\\\"custom-file-label\\\">\\u0412\\u044B\\u0431\\u0438\\u0440\\u0435\\u0442\\u0435 \\u0444\\u0430\\u0439\\u043B</label>\" + \"</div>\" + \"</div>\" + \"<p class=\\\"text-danger error-message\\\" error-message style=\\\"display: none\\\" img-error></p>\" + \"</div>\");\n  bsCustomFileInput.init();\n});\n$(\"#addChar\").on(\"click\", function () {\n  $(\"#charList\").append(\"<div class=\\\"form-group\\\" block charBlock>\" + \"<div class=\\\"input-group\\\">\" + \"<div class=\\\"input-group-prepend\\\">\" + \"<button type=\\\"button\\\" class=\\\"btn btn-danger\\\" delete-block>\" + \"<i class=\\\"fas fa-trash\\\"></i>\" + \"</button>\" + \"</div>\" + \"<input type=\\\"text\\\" name=\\\"charName[]\\\" class=\\\"form-control\\\" placeholder=\\\"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\\\" required>\" + \"<input type=\\\"text\\\" name=\\\"charValue[]\\\" class=\\\"form-control\\\" placeholder=\\\"\\u0417\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435\\\" required>\" + \"</div>\" + \"<p class=\\\"text-danger error-message\\\" error-message style=\\\"display: none\\\" char-name-error></p>\" + \"<p class=\\\"text-danger error-message\\\" error-message style=\\\"display: none\\\" char-value-error></p>\" + \"</div>\");\n  bsCustomFileInput.init();\n});\n$('#addForm, #editForm').submit(function () {\n  var form = $(this);\n  var formData = new FormData(form[0]);\n  $.ajax({\n    type: $(this).attr('method'),\n    url: $(this).attr('action'),\n    data: formData,\n    cache: false,\n    contentType: false,\n    processData: false,\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    },\n    success: function success(data) {\n      $(\"[error-message]\").hide();\n\n      if (data.action == 'reset') {\n        form[0].reset();\n        resetForm();\n      }\n\n      if (data.data.message) {\n        toastr.success(data.data.message);\n      }\n\n      if (data.data.html) {\n        if (data.data.html.imgBlock) {\n          $(\"[imgBlock]\").remove();\n          $('#imgBlock').html(data.data.html.imgBlock);\n        }\n\n        if (data.data.html.charBlock) {\n          $('#charList').html(data.data.html.charBlock);\n        }\n      }\n    },\n    error: function error(data) {\n      $('[error-message]').attr('error-message', 'false');\n      var response = data.responseJSON;\n\n      for (key in response.errors) {\n        var charValue = key.match(/charValue\\.([0-9]+)/);\n        var editCharValue = key.match(/editCharValue\\.([0-9]+)/);\n        var charName = key.match(/charName\\.([0-9]+)/);\n        var editCharName = key.match(/editCharName\\.([0-9]+)/);\n        var img = key.match(/img\\.([0-9]+)/);\n\n        if (charValue) {\n          $(\"[char-value-error]\").eq([charValue[1]]).show().text(response.errors[key].join(', ')).attr('error-message', 'true');\n        }\n\n        if (editCharValue) {\n          $(\"[name='editCharValue[\".concat(editCharValue[1], \"]']\")).parent().parent().find('[edit-char-value-error]').show().text(response.errors[key].join(', ')).attr('error-message', 'true');\n        }\n\n        if (editCharName) {\n          $(\"[name='editCharName[\".concat(editCharName[1], \"]']\")).parent().parent().find('[edit-char-name-error]').show().text(response.errors[key].join(', ')).attr('error-message', 'true');\n        }\n\n        if (charName) {\n          $(\"[char-name-error]\").eq([charName[1]]).show().text(response.errors[key].join(', ')).attr('error-message', 'true');\n        }\n\n        if (img) {\n          $(\"[img-error]\").eq([img[1]]).show().text(response.errors[key].join(', ')).attr('error-message', 'true');\n        } else {\n          $(\"#error-\".concat(key)).show().text(response.errors[key].join(', ')).attr('error-message', 'true');\n        }\n      }\n\n      ;\n      $(\"[error-message=false]\").hide();\n\n      if (data.responseJSON.message) {\n        toastr.error(data.responseJSON.message);\n      }\n    }\n  });\n  return false;\n});\n\nfunction resetForm() {\n  $(\"[form-field]\").each(function () {\n    $(this).removeClass(\"errorField\");\n    $(this).val(\"\");\n  });\n  $(\"[imgBlock]\").remove();\n  $(\"[charBlock]\").remove();\n}\n\n$('body').delegate('#btn-modal-search', 'click', function () {\n  $('#modal-search').modal();\n});\n$('body').delegate('#btn-clear-search', 'click', function () {\n  $('#searchForm')[0].reset();\n});\n$('#searchForm').submit(function () {\n  $('#modal-search').modal('hide');\n  $.ajax({\n    type: $(this).attr('method'),\n    url: $(this).attr('action'),\n    data: $(this).serialize(),\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    },\n    success: function success(data) {\n      $(\"[error-message]\").hide();\n      $('#category').html(data.data.html.category);\n    },\n    error: function error(data) {\n      if (data.responseJSON.message) {\n        toastr.error(data.responseJSON.message);\n      }\n    }\n  });\n  return false;\n});\n$('body').delegate('#btn-modal-reset', 'click', function () {\n  var product_id = $(this).attr('product_id');\n  $.ajax({\n    type: $(this).attr('method'),\n    url: $(this).attr('action'),\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    },\n    data: {\n      product_id: product_id\n    },\n    success: function success(data) {\n      $(\"[error-message]\").hide();\n      $('#category').html(data.data.html.category);\n    },\n    error: function error(data) {\n      if (data.responseJSON.message) {\n        toastr.error(data.responseJSON.message);\n      }\n    }\n  });\n});\n$('body').delegate('[btn-delete-img]', 'click', function () {\n  $(this).parent().hide();\n  var attr = $(this).attr('server-delete');\n\n  if (_typeof(attr) !== ( true ? \"undefined\" : 0)) {\n    $(this).prev(\"[deleteImg]\").val('true');\n  }\n});\n$('body').delegate('[delete-block-id]', 'click', function () {\n  $(this).parents('[block]').hide().find('[type=\"text\"]').remove();\n  $(this).prev(\"[deleteChar]\").val('true');\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/singl/product.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/singl/product.js"]();
/******/ 	
/******/ })()
;